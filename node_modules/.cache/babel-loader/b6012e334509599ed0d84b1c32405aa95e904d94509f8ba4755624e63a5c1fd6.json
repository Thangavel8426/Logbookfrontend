{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pthan\\\\OneDrive\\\\Desktop\\\\SBproject\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { authAPI } from '../services/api';\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n  const validateToken = useCallback(token => {\n    if (!token) return false;\n    try {\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n\n      // Check if token is expired (with 5 minute buffer)\n      if (decoded.exp && decoded.exp < currentTime + 300) {\n        console.log('Token is expired or will expire soon');\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return false;\n    }\n  }, []);\n  const refreshUser = useCallback(() => {\n    const storedToken = localStorage.getItem('token');\n    console.log('Checking stored token:', storedToken ? 'exists' : 'not found');\n    if (storedToken && validateToken(storedToken)) {\n      try {\n        const decodedUser = jwtDecode(storedToken);\n        console.log('Token is valid, user:', decodedUser.sub);\n        setUser(decodedUser);\n        setToken(storedToken);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Token decoding error:', error);\n        logout();\n      }\n    } else {\n      console.log('No valid token found, user not authenticated');\n      setIsAuthenticated(false);\n      setUser(null);\n      setToken(null);\n    }\n    setLoading(false);\n  }, [validateToken]);\n  useEffect(() => {\n    refreshUser();\n  }, [refreshUser]);\n\n  // Set up periodic token validation\n  useEffect(() => {\n    if (isAuthenticated && token) {\n      const interval = setInterval(() => {\n        if (!validateToken(token)) {\n          console.log('Token expired during session, logging out');\n          logout();\n        }\n      }, 60000); // Check every minute\n\n      return () => clearInterval(interval);\n    }\n  }, [isAuthenticated, token, validateToken]);\n  const login = async (username, password) => {\n    try {\n      const response = await authAPI.login({\n        username,\n        password\n      });\n      const {\n        token: authToken\n      } = response.data;\n      if (!authToken) {\n        throw new Error('No token received from server');\n      }\n      const decodedUser = jwtDecode(authToken);\n      console.log('Login successful, user:', decodedUser.sub);\n      setUser(decodedUser);\n      setToken(authToken);\n      setIsAuthenticated(true);\n      localStorage.setItem('token', authToken);\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    console.log('Logging out user');\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('token');\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    token,\n    login,\n    logout,\n    loading,\n    refreshUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"VyvnKpmNx8BkEPyPp4Ex7vC8aSI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","authAPI","jwtDecode","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","validateToken","decoded","currentTime","Date","now","exp","console","log","error","refreshUser","storedToken","decodedUser","sub","logout","interval","setInterval","clearInterval","login","username","password","response","authToken","data","setItem","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/pthan/OneDrive/Desktop/SBproject/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport { authAPI } from '../services/api';\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const validateToken = useCallback((token) => {\r\n    if (!token) return false;\r\n    \r\n    try {\r\n      const decoded = jwtDecode(token);\r\n      const currentTime = Date.now() / 1000;\r\n      \r\n      // Check if token is expired (with 5 minute buffer)\r\n      if (decoded.exp && decoded.exp < currentTime + 300) {\r\n        console.log('Token is expired or will expire soon');\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Token validation error:', error);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const refreshUser = useCallback(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    console.log('Checking stored token:', storedToken ? 'exists' : 'not found');\r\n    \r\n    if (storedToken && validateToken(storedToken)) {\r\n      try {\r\n        const decodedUser = jwtDecode(storedToken);\r\n        console.log('Token is valid, user:', decodedUser.sub);\r\n        setUser(decodedUser);\r\n        setToken(storedToken);\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        console.error('Token decoding error:', error);\r\n        logout();\r\n      }\r\n    } else {\r\n      console.log('No valid token found, user not authenticated');\r\n      setIsAuthenticated(false);\r\n      setUser(null);\r\n      setToken(null);\r\n    }\r\n    setLoading(false);\r\n  }, [validateToken]);\r\n\r\n  useEffect(() => {\r\n    refreshUser();\r\n  }, [refreshUser]);\r\n\r\n  // Set up periodic token validation\r\n  useEffect(() => {\r\n    if (isAuthenticated && token) {\r\n      const interval = setInterval(() => {\r\n        if (!validateToken(token)) {\r\n          console.log('Token expired during session, logging out');\r\n          logout();\r\n        }\r\n      }, 60000); // Check every minute\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isAuthenticated, token, validateToken]);\r\n\r\n  const login = async (username, password) => {\r\n    try {\r\n      const response = await authAPI.login({ username, password });\r\n      const { token: authToken } = response.data;\r\n      \r\n      if (!authToken) {\r\n        throw new Error('No token received from server');\r\n      }\r\n      \r\n      const decodedUser = jwtDecode(authToken);\r\n      console.log('Login successful, user:', decodedUser.sub);\r\n      \r\n      setUser(decodedUser);\r\n      setToken(authToken);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('token', authToken);\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    console.log('Logging out user');\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    token,\r\n    login,\r\n    logout,\r\n    loading,\r\n    refreshUser,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}