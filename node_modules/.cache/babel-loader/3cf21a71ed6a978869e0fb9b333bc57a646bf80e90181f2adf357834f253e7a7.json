{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData)\n};\nexport const experimentAPI = {\n  getAll: () => api.get('/experiments'),\n  getById: id => api.get(`/experiments/${id}`),\n  create: experimentData => api.post('/experiments', experimentData),\n  update: (id, experimentData) => api.put(`/experiments/${id}`, experimentData),\n  delete: id => api.delete(`/experiments/${id}`),\n  updateStatus: (id, status) => api.put(`/experiments/${id}/status`, null, {\n    params: {\n      status\n    }\n  }),\n  search: (keyword, page = 0, size = 10) => api.get('/experiments/search', {\n    params: {\n      keyword,\n      page,\n      size\n    }\n  }),\n  getByUser: userId => api.get(`/experiments/user/${userId}`),\n  getByStatus: status => api.get(`/experiments/status/${status}`)\n};\nexport const userAPI = {\n  getAll: () => api.get('/users'),\n  getById: id => api.get(`/users/${id}`),\n  create: userData => api.post('/users', userData),\n  update: (id, userData) => api.put(`/users/${id}`, userData),\n  delete: id => api.delete(`/users/${id}`),\n  checkUsername: username => api.get(`/users/check-username/${username}`),\n  checkEmail: email => api.get(`/users/check-email/${email}`),\n  uploadProfilePicture: (username, fileData) => api.post(`/profile-pictures/${username}`, fileData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authAPI","login","credentials","post","register","userData","experimentAPI","getAll","get","getById","id","experimentData","update","put","delete","updateStatus","status","params","search","keyword","page","size","getByUser","userId","getByStatus","userAPI","checkUsername","username","checkEmail","email","uploadProfilePicture","fileData"],"sources":["C:/Users/pthan/OneDrive/Desktop/SBproject/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if available\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  register: (userData) => api.post('/auth/register', userData),\r\n};\r\n\r\nexport const experimentAPI = {\r\n  getAll: () => api.get('/experiments'),\r\n  getById: (id) => api.get(`/experiments/${id}`),\r\n  create: (experimentData) => api.post('/experiments', experimentData),\r\n  update: (id, experimentData) => api.put(`/experiments/${id}`, experimentData),\r\n  delete: (id) => api.delete(`/experiments/${id}`),\r\n  updateStatus: (id, status) => api.put(`/experiments/${id}/status`, null, { params: { status } }),\r\n  search: (keyword, page = 0, size = 10) => api.get('/experiments/search', { params: { keyword, page, size } }),\r\n  getByUser: (userId) => api.get(`/experiments/user/${userId}`),\r\n  getByStatus: (status) => api.get(`/experiments/status/${status}`),\r\n};\r\n\r\nexport const userAPI = {\r\n  getAll: () => api.get('/users'),\r\n  getById: (id) => api.get(`/users/${id}`),\r\n  create: (userData) => api.post('/users', userData),\r\n  update: (id, userData) => api.put(`/users/${id}`, userData),\r\n  delete: (id) => api.delete(`/users/${id}`),\r\n  checkUsername: (username) => api.get(`/users/check-username/${username}`),\r\n  checkEmail: (email) => api.get(`/users/check-email/${email}`),\r\n  uploadProfilePicture: (username, fileData) => api.post(`/profile-pictures/${username}`, fileData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  }),\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKd,GAAG,CAACe,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAKjB,GAAG,CAACe,IAAI,CAAC,gBAAgB,EAAEE,QAAQ;AAC7D,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG;EAC3BC,MAAM,EAAEA,CAAA,KAAMnB,GAAG,CAACoB,GAAG,CAAC,cAAc,CAAC;EACrCC,OAAO,EAAGC,EAAE,IAAKtB,GAAG,CAACoB,GAAG,CAAC,gBAAgBE,EAAE,EAAE,CAAC;EAC9CrB,MAAM,EAAGsB,cAAc,IAAKvB,GAAG,CAACe,IAAI,CAAC,cAAc,EAAEQ,cAAc,CAAC;EACpEC,MAAM,EAAEA,CAACF,EAAE,EAAEC,cAAc,KAAKvB,GAAG,CAACyB,GAAG,CAAC,gBAAgBH,EAAE,EAAE,EAAEC,cAAc,CAAC;EAC7EG,MAAM,EAAGJ,EAAE,IAAKtB,GAAG,CAAC0B,MAAM,CAAC,gBAAgBJ,EAAE,EAAE,CAAC;EAChDK,YAAY,EAAEA,CAACL,EAAE,EAAEM,MAAM,KAAK5B,GAAG,CAACyB,GAAG,CAAC,gBAAgBH,EAAE,SAAS,EAAE,IAAI,EAAE;IAAEO,MAAM,EAAE;MAAED;IAAO;EAAE,CAAC,CAAC;EAChGE,MAAM,EAAEA,CAACC,OAAO,EAAEC,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,EAAE,KAAKjC,GAAG,CAACoB,GAAG,CAAC,qBAAqB,EAAE;IAAES,MAAM,EAAE;MAAEE,OAAO;MAAEC,IAAI;MAAEC;IAAK;EAAE,CAAC,CAAC;EAC7GC,SAAS,EAAGC,MAAM,IAAKnC,GAAG,CAACoB,GAAG,CAAC,qBAAqBe,MAAM,EAAE,CAAC;EAC7DC,WAAW,EAAGR,MAAM,IAAK5B,GAAG,CAACoB,GAAG,CAAC,uBAAuBQ,MAAM,EAAE;AAClE,CAAC;AAED,OAAO,MAAMS,OAAO,GAAG;EACrBlB,MAAM,EAAEA,CAAA,KAAMnB,GAAG,CAACoB,GAAG,CAAC,QAAQ,CAAC;EAC/BC,OAAO,EAAGC,EAAE,IAAKtB,GAAG,CAACoB,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EACxCrB,MAAM,EAAGgB,QAAQ,IAAKjB,GAAG,CAACe,IAAI,CAAC,QAAQ,EAAEE,QAAQ,CAAC;EAClDO,MAAM,EAAEA,CAACF,EAAE,EAAEL,QAAQ,KAAKjB,GAAG,CAACyB,GAAG,CAAC,UAAUH,EAAE,EAAE,EAAEL,QAAQ,CAAC;EAC3DS,MAAM,EAAGJ,EAAE,IAAKtB,GAAG,CAAC0B,MAAM,CAAC,UAAUJ,EAAE,EAAE,CAAC;EAC1CgB,aAAa,EAAGC,QAAQ,IAAKvC,GAAG,CAACoB,GAAG,CAAC,yBAAyBmB,QAAQ,EAAE,CAAC;EACzEC,UAAU,EAAGC,KAAK,IAAKzC,GAAG,CAACoB,GAAG,CAAC,sBAAsBqB,KAAK,EAAE,CAAC;EAC7DC,oBAAoB,EAAEA,CAACH,QAAQ,EAAEI,QAAQ,KAAK3C,GAAG,CAACe,IAAI,CAAC,qBAAqBwB,QAAQ,EAAE,EAAEI,QAAQ,EAAE;IAChGxC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;AACH,CAAC;AAED,eAAeH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}